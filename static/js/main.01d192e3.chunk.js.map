{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Completionist","renderer","days","hours","minutes","seconds","completed","text","renderTableData","clima","map","day","index","dt","temp","weather","rain","date","Date","d","getDate","m","getMonth","description","icon","iconSource","className","src","alt","max","min","renderTable","key","toUpperCase","App","useState","setClima","useEffect","axios","get","then","res","data","daily","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAKMA,G,MAAgB,kBAAM,yFAGtBC,EAAW,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QACxC,GADiE,EAAhBC,UAG/C,OAAO,cAAC,EAAD,IAGP,IAAMC,EAAI,UAAML,EAAN,qBAAoBC,EAApB,mBAAoCC,EAApC,sBAAyDC,EAAzD,cACV,OAAO,+BAAOE,KAWZC,EAAkB,SAACC,GACvB,OAAOA,EAAMC,KAAI,SAACC,EAAKC,GAAW,IACvBC,EAA4BF,EAA5BE,GAAIC,EAAwBH,EAAxBG,KAAMC,EAAkBJ,EAAlBI,QAASC,EAASL,EAATK,KACrBC,EAAO,IAAIC,KAAU,IAALL,GAChBM,EAAIF,EAAKG,UACTC,EAAIJ,EAAKK,WAAa,EAJE,EAKAP,EAAQ,GAA9BQ,EALsB,EAKtBA,YAAaC,EALS,EAKTA,KACfC,EAAU,4CAAwCD,EAAxC,WAChB,OACG,qBAAgBE,UAAU,WAA1B,UACG,oBAAIA,UAAU,UAAd,SAAwB,qBAAKC,IAAKF,EAAYG,IAAKL,EAAaG,UAAU,eAC1E,6BAAKP,EAAI,IAAME,IACf,+BAAKP,EAAKe,IAAV,UACA,+BAAKf,EAAKgB,IAAV,UACA,6BAAKP,IACL,+BAAKP,GAAc,EAAnB,UANMJ,OAYXmB,EAAc,SAACtB,GACnB,OAAOA,EAAS,sBAAKiB,UAAU,QAAf,UACd,oBAAIA,UAAU,cAAd,qCACA,uBAAOA,UAAU,aAAjB,SACI,kCACE,6BAhCO,CAAC,GAAI,MAAO,MAAO,MAAO,cAAe,UAC1ChB,KAAI,SAACsB,GAChB,OAAO,oBAAIN,UAAU,cAAd,SAA6BM,EAAIC,qBA+BlCzB,EAAgBC,WAGf,sBAAMiB,UAAU,aAAhB,+CA4CGQ,MAzCf,WAAgB,IAAD,EACaC,qBADb,mBACN1B,EADM,KACC2B,EADD,KAQb,OALAC,qBAAU,WACRC,IAAMC,IAAI,4KACPC,MAAK,SAAAC,GAAG,OAAIL,EAASK,EAAIC,KAAKC,YAChC,IAGD,qBAAKjB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,4DAGA,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAWT,KAAM,sBAAuBhB,SAAUA,MAEhD8B,EAAYtB,GAChB,sBAAKiB,UAAU,OAAf,UACE,mBACEA,UAAU,OACVkB,KAAK,uGACLC,OAAO,SACPC,IAAI,sBAJN,SAME,qBAAKpB,UAAU,gBAEjB,mBACAA,UAAU,OACVkB,KAAK,6BACLC,OAAO,SACPC,IAAI,sBAJJ,SAMA,qBAAKpB,UAAU,4BChFVqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.01d192e3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Countdown from 'react-countdown'\nimport axios from 'axios';\nimport './App.css';\n\nconst Completionist = () => <span>¿Qué haces mirando esto? Andá a la quinta!</span>;\n\n// Renderer callback with condition\nconst renderer = ({ days, hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n    const text = `${days} días, ${hours} horas, ${minutes} minutos y ${seconds} segundos.`;\n    return <span>{text}</span>;\n  }\n};\n\nconst renderTableHeader = () => {\n  const header = ['', 'Dia', 'Max', 'Min', 'Descripcion', 'Lluvia'] \n  return header.map((key) => {\n     return <th className='climaHeader'>{key.toUpperCase()}</th>\n  })\n}\n\nconst renderTableData = (clima) => {\n  return clima.map((day, index) => {\n     const { dt, temp, weather, rain } = day\n     const date = new Date(dt * 1000);\n     const d = date.getDate();\n     const m = date.getMonth() + 1;\n     const { description, icon } = weather[0];\n     const iconSource = `https://openweathermap.org/img/wn/${icon}@2x.png`\n     return (\n        <tr key={index} className=\"climaRow\">\n           <td className=\"imgCell\"><img src={iconSource} alt={description} className=\"climaImg\"></img></td>\n           <td>{d + '/' + m}</td>\n           <td>{temp.max}°</td>\n           <td>{temp.min}°</td>\n           <td>{description}</td>\n           <td>{rain ? rain : 0}mm</td>\n        </tr>\n     )\n  })\n}\n\nconst renderTable = (clima) => {\n  return clima ? (<div className=\"clima\">\n    <h3 className='climaTitulo'>Pronóstico Extendido</h3>\n    <table className='ClimaTotal'>\n        <tbody>\n          <tr>{renderTableHeader()}</tr>\n          {renderTableData(clima)}\n        </tbody>\n    </table>\n  </div>) : <span className=\"disclaimer\">Ojalá esté lindo el clima.</span>\n}\n\nfunction App() {\n  const [clima, setClima] = useState();\n\n  useEffect(() => {\n    axios.get('https://api.openweathermap.org/data/2.5/onecall?lat=-35.05&lon=-58.76&exclude=current,minutely,hourly,alerts&appid=3bb1ce5cdda41cf78d642217d1d40e88&units=metric&lang=es')\n      .then(res => setClima(res.data.daily));\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Cuadrazos, Cañuelas en:\n        </h1>\n        <div className=\"countdown\">\n          <Countdown date={'2020-12-04T16:00:00'} renderer={renderer}/>\n        </div>\n          { renderTable(clima) }\n        <div className='Item'>\n          <a\n            className=\"link\"\n            href=\"https://docs.google.com/spreadsheets/d/1_4J21WzATOdeTBdpbAU_euGrJKQCbGvxqC9EdgN2TZQ/edit?usp=sharing\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <div className='Tano-logo'></div>\n          </a>\n          <a\n          className=\"link\"\n          href=\"https://discord.gg/Pbbn2CE\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div className='Discord-logo'></div>\n        </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}